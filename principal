!pip install requests python-docx
//tradução


import requests
from docx import Document
import os

subscription_key = “ Copiar e colar a chave key feito no Azure.”
endpoint = ‘Link gerado no Azure’
location = “eastus2”
language_destination = ‘pt-br’

def translator_document(text, target_language):
	path = ‘/translate’
	constructed_url = endpoint + path
	headers = {
		‘Ocp-Apim-Subscription-key’ : subscription_key,
		‘Ocp-Apim-Subscription-Region’ : location,
		‘Content-type’ : ‘application/json’,
		‘X-ClientTraceId’ : str(os.urandom(16))
}

body = [{
	‘text’ : text
}]
params = {
	‘api-version’ : ‘3.0’,
	‘from’ : ‘en’,
	‘to’ : target_language
}
request = request.post(construced_url, params=params, headers=headers, json=body)
response = request.json()
return response[0][“translations”][0][“text”]


translator_text(“I know you’re somewhere out there, somewhere far away”, language_destination )
	


// codigo para traduzir um texto.

def translator_document(path)
	document = Document(path)
	full_text = []
	for paragraph in document.paragraph:
		translated_text = translator_text(paragraph.text, language_destination)
		full_text.append(translated_text)
	
	translated_doc = Document()
	for line in full_text:
		print(line)
		translated_doc.add_paragraph(line)
	path_translated = path.replace(“.docx”, f”_{language_destination}.docx”)
	translated_doc.save(path_translated)
	return path_translated

input_file = “/caminho/documento em extensão .docx”
translate_document(input_file)




//tradução de uma pagina web e artigos.
!pip install request beautifulsoup4 openai langchain-openai



import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
	response = requests.get(url)

	if response.status_code == 200:
		soup = BeautifulSoup(response.text, ‘html.parser’)
		for script_or_style in soup([‘script’, ‘style’]):
			script_or_style.decompose()
		texto = soup.get_text(separator = ‘ ‘)
		#Limpar texto
		linhas = (line.strip() for line in texto.splitlines())
		parts = (phrase.strip() for line in linhas for phrase in line.split(“  ”))
		texto_limpo = ‘\n’.join(part for part in parts if part)
		return texto_limpo
	else:
		print(f”Failed to fetch the URL. Status code: {response.status_code}”)
		return None
		
	
	text = soup.get_text()
	return text

extract_text_from_url(‘Colar url’)



from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI (
	azure_endpoint = “Colocar link criando no Azure”,
	api_key = “Copiar e colar a chave key feito no Azure.”,
	api_version = “2024-07-18”,
	deployment_name = “gpt-4o-mini”,
	max_retries = 0
)

def translate_article(text, lang):
	messages = [
		(“system” , “Você atua como tradutor de textos”),
		(“user” , f”Traduza o {text} para o idioma {lang} e  responda em markdown”)
]

	response = client.inoke(messages)
	print(response.content)
	return response.content

translate_article(“Let´s see if the deployment was succeeded.”, “português”)


url = ‘Colocar a url desejada.’
text = extract_text_from_url(url)
article = translate_article(text, “português”)

print(article)
